topKSimilarUsersID = distance$user[1:(k+1)]
topKSimilarUsersID = topKSimilarUsersID[topKSimilarUsersID != userID]
topKSimilarUsers = N[Users %in% topKSimilarUsersID,]
return(topKSimilarUsers)
}
getTopKSimilarUsers(4, 3)
getTopKSimilarUsers <- function(userID, k)
{
score= 0
user = 0
for (i in 1:nrow(svd2$u))
{
score[i] = cosine(svd2$u[userID,], as.vector(u[i,]))
user[i] = i
}
distance = data.frame(user, score)
distance = distance[order(-distance$score),]
topKSimilarUsersID = distance$user[1:(k+1)]
topKSimilarUsersID = topKSimilarUsersID[topKSimilarUsersID != userID]
topKSimilarUsers = N[Users %in% topKSimilarUsersID,]
return(topKSimilarUsers)
}
getTopKSimilarUsers(4, 3)
??cosine
getCosine
getTopKSimilarUsers <- function(userID, k)
{
score= 0
user = 0
for (i in 1:nrow(svd2$u))
{
score[i] = geCosine(svd2$u[userID,], as.vector(u[i,]))
user[i] = i
}
distance = data.frame(user, score)
distance = distance[order(-distance$score),]
topKSimilarUsersID = distance$user[1:(k+1)]
topKSimilarUsersID = topKSimilarUsersID[topKSimilarUsersID != userID]
topKSimilarUsers = N[Users %in% topKSimilarUsersID,]
return(topKSimilarUsers)
}
getTopKSimilarUsers(4, 3)
getTopKSimilarUsers <- function(userID, k)
{
score= 0
user = 0
for (i in 1:nrow(svd2$u))
{
score[i] = getCosine(svd2$u[userID,], as.vector(u[i,]))
user[i] = i
}
distance = data.frame(user, score)
distance = distance[order(-distance$score),]
topKSimilarUsersID = distance$user[1:(k+1)]
topKSimilarUsersID = topKSimilarUsersID[topKSimilarUsersID != userID]
topKSimilarUsers = N[Users %in% topKSimilarUsersID,]
return(topKSimilarUsers)
}
getTopKSimilarUsers(4, 3)
getTopKSimilarUsers <- function(userID, k)
{
score= 0
user = 0
for (i in 1:nrow(svd2$u))
{
score[i] = getCosine(svd2$u[userID,], as.vector(svd2$u[i,]))
user[i] = i
}
distance = data.frame(user, score)
distance = distance[order(-distance$score),]
topKSimilarUsersID = distance$user[1:(k+1)]
topKSimilarUsersID = topKSimilarUsersID[topKSimilarUsersID != userID]
topKSimilarUsers = N[Users %in% topKSimilarUsersID,]
return(topKSimilarUsers)
}
getTopKSimilarUsers(4, 3)
getExpectedRating <- function(userID, k, song)
{
topKSimilarUsers = getTopKSimilarUsers(userID, k)
rating = mean(topKSimilarUsers[, song])
return("Expected_Rating: " = rating)
}
getExpectedRating(4, 3, "Song2")
?dist
rm(list=ls(all=TRUE))
group.one = cbind(runif(100,0,15),
runif(100,0,1))
group.two = cbind(rnorm(100,15,1),
rnorm(100,5,1))
uniform.pts = runif(100,4,15)
group.three = cbind(uniform.pts+
rnorm(100,0,.5),
uniform.pts+
rnorm(100,0,.5))
x = rbind(group.one,group.two,group.three)
plot(x, xlab="",ylab="")
km = kmeans(x, centers=3,
iter.max=20,
nstart=5)
plot(x,xlab="",ylab="",
col=c("red","black","blue")[km$cluster],
main="k-means")
rm(list=ls(all=TRUE))
install.packages("recommenderlab")
library("recommenderlab")
m <- matrix(sample(c(as.numeric(0:5), NA), 50,
replace=TRUE, prob=c(rep(.4/6,6),.6)), ncol=10,
dimnames=list(user=paste("u", 1:5, sep=""),
item=paste("i", 1:10, sep="")))
m
r <- as(m, "realRatingMatrix")
r
summary(r)
image(r, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
r1 <- Recommender(r, method = "POPULAR")
r1
names(getModel(r1))
getModel(r1)$topN
recom <- predict(r1, r[3], n=5)
recom
as(recom, "list")
recom1 <- predict(r1, r[4], type="ratings")
recom1
as(recom1, "matrix")
e <- evaluationScheme(r, method="split", train=0.8,
given=3, goodRating=3)
r2 <- Recommender(getData(e, "train"), "UBCF")
r2
r3 <- Recommender(getData(e, "train"), "IBCF")
r3
p1 <- predict(r2, getData(e, "known"), type="ratings")
p1
p2 <- predict(r3, getData(e, "known"), type="ratings")
p2
error <- rbind(
calcPredictionAccuracy(p1, getData(e, "unknown")),
calcPredictionAccuracy(p2, getData(e, "unknown"))
)
rownames(error) <- c("UBCF","IBCF")
error
as(p1, "list")
as(p1, "matrix")
as(p2, "list")
as(p2, "matrix")
?dcast
??dcast
?evaluationScheme
??evaluationScheme
?colCount
??colCount
rm(list=la(all=TRUE))
fnBirthDay <- function(simulations){
set.seed(1234)
yes = no =0
x=sample(1:7, simulations,replace = TRUE)
y=sample(1:7, simulations,replace = TRUE)
for (j in 1:simulations) {
if(x[j]==y[j]){
yes=yes+1
}
}
probability = yes/simulations
cat("probability is : ", probability, " for ",simulations, " simulations ","\n")
# exe_time=proc.time() - start_time
# print(exe_time)
}
simulations=c(10,100,1000,10000,100000)
par(mfrow=c(1,3))
start = Sys.time()
for (i in simulations) {
probability=fnBirthDay(i)
}
end=Sys.time()-start
end
start1 = Sys.time()
probability1 = sapply(simulations,fnBirthDay)
end1=Sys.time()-start1
end1
start2 = Sys.time()
probability2 = lapply(simulations,fnBirthDay)
end2=Sys.time()-start2
end2
?runif
rm(list=ls(all=TRUE))
library("recommenderlab")
m <- matrix(sample(c(as.numeric(0:5), NA), 50,
replace=TRUE, prob=c(rep(.4/6,6),.6)), ncol=10,
dimnames=list(user=paste("u", 1:5, sep=""),
item=paste("i", 1:10, sep="")))
m
r <- as(m, "realRatingMatrix")
r
summary(r)
image(r, main = "Raw Ratings")
r_m<-normalize(r)
image(r_m, main = "Normalized Ratings")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
r1 <- Recommender(r, method = "POPULAR")
r1
names(getModel(r1))
getModel(r1)$topN
r[3]
as(r[3],list)
as(r[3],"list")
as(r_m[3],"list")
recom <- predict(r1, r[3], n=5)
recom
as(recom, "list")
?predict
recom1 <- predict(r1, r[4], type="ratings")
recom1
as(recom1, "matrix")
as(r_m[4],"list")
recom1 <- predict(r1, r[4], type="ratingMatrix")
recom1 <- predict(r1, r[4], type="ratings")
recom1
as(recom1, "matrix")
e <- evaluationScheme(r, method="split", train=0.8,
given=3, goodRating=3)
?evaluationScheme
e <- evaluationScheme(r, method="split", train=0.8,
given=3, goodRating=3)
given=2, goodRating=3)
e <- evaluationScheme(r, method="split", train=0.8,
given=2, goodRating=3)
r2 <- Recommender(getData(e, "train"), "UBCF")
r2
r3 <- Recommender(getData(e, "train"), "IBCF")
r3
p1 <- predict(r2, getData(e, "known"), type="ratings")
p1
as(p1, "list")
as(p1, "matrix")
p1 <- predict(r2, getData(e, "known"), type="ratings")
p1
r2 <- Recommender(getData(e, "train"), "UBCF")
r2
r3 <- Recommender(getData(e, "train"), "IBCF")
r3
p1 <- predict(r2, getData(e, "known"), type="ratings")
p1
p2 <- predict(r3, getData(e, "known"), type="ratings")
p2
as(p2, "list")
getdata(e,"train")
getData(e, "train")
as(getData(e, "train"),"matrix")
avg(1080,1920,1250,3840,800)
sum(1080,1920,1250,3840,800)
8890/5
10000/6
1778-1666.667
(700000-84000)*0.04
(1200000-144000)*0.7
(100000-12000)*0.07
24640+739200+6160
700000+1200000+100000
2e+06 * 0.5
(84000*0.95)+(144000*0.95)+(12000*0.95)
228000*0.5
228000*(0.5/1.2)
2000000*(0.5/1.2)
1805*4200
require(ISLR)
datasets
pairs(Auto)
?pairs
?fix
datasets()
dataset()
head(Boston)
attach(Boston)
require(MASS)
attach(Boston)
head(Boston)
names(Boston)
lm.1<-lm(mdev~lstat,data=Boston)
lm.1<-lm(medv~lstat,data=Boston)
lm.1
summary(lm.1)
plot(lstat,medv)
abline(lm.1)
?abline
plot(lm.1)
par(mfrow=c(2,2))
plot(lm.1)
require(car)
vif(lm.1)
lm.2<-lm(medv~.,data=Boston)
vif(lm.2)
library(ISLR)
data()
attach(Weekly)
names(Weekly)
dim(Weekly)
head(Weekly)
plot(Weekly)
summary(Weekly)
list()
object()
objects()
x<-list(foo=1:4,bar=0.6)
x
x[[1]]
x[[0]]
x<-c("a","b","c","c","d","a")
x[0:]
x[1:]
x[1:4]
x[0:4]
x[0:1]
x[0:2]
x[1:2]
x[0]
x[1]
?rprofiler
?Rprofiler
?lapply
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
?translate_qplot_base
?grepl
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
rm(list=ls(all=T))
getwd()
setwd("/Users/Saatwik/Documents/avidya/CapeGemini")
dir()
rm(list=ls())
getwd()
setwd("/Users/Saatwik/Documents/avidya/CapeGemini")
require(DMwR)
require(C50)
require(vegan)
require(randomForest)
require(infotheo)
train<-read.csv("sample_data.csv",header=T,sep=",")
dim(train)
str(train)
sum(is.na(train))
summary(train)
a<-subset(train,select=-c(1))
View(a)
train.resp<-read.csv("sample_output.csv",header=T,sep=",")
?merge
train<-merge(train,train.resp,by=intersect(names(train),names(train.resp)))
str(train)
data_process<-function(data){
#Remove application ID
data<-subset(data,select=-c(1))
#Conevert credit history into factor
data$Credit_history<-as.factor(as.character(data$Credit_History))
data<-centralImputation(data)
return (data)
}
train<-data_process(train)
str(train)
rm(list=ls())
getwd()
setwd("/Users/Saatwik/Documents/avidya/CapeGemini")
train<-read.csv("sample_data.csv",header=T,sep=",")
dim(train)
str(train)
sum(is.na(train))
summary(train)
train.resp<-read.csv("sample_output.csv",header=T,sep=",")
train<-merge(train,train.resp,by=intersect(names(train),names(train.resp)))
data_process<-function(data){
#Remove application ID
data<-subset(data,select=-c(1))
#Conevert credit history into factor
data$Credit_History<-as.factor(as.character(data$Credit_History))
data<-centralImputation(data)
return (data)
}
train<-data_process(train)
str(train)
Model_C50 <-C5.0(train[,-12],train[,12],trials=50)
Model_C50
summary(Model_C50)
str(train)
Model_rf<-randomForest(Loan_Status~.,data=train,importance=T)
Model_rf
summary(Model_rf)
test<-read.csv("test_data.csv",header=T,sep=",")
test<-data_process(test)
str(test)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
str(test.appl)
pred_rf<-predict(Model_rf,newdata=test,type="response",predict.all=T)
str(test)
str(train)
test$Loan_Status<-train$Loan_Status
test$Loan_Status<-"N"
str(test)
test$Loan_Status<-as.facttor("N")
test$Loan_Status<-as.factor("N")
str(test)
pred_rf<-predict(Model_rf,newdata=test,type="response",predict.all=T)
test$Married<-if(test$Married == "","N")
test$Married<-ifelse(test$Married == "","N")
test$Married<-ifelse(test$Married == "","N",ifelse(test$Married == "Y","Y","N"))
str(test)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
test<-data_process(test)
summary(test$Married)
test[test$Married == ""]
test[,test$Married == ""]
test[test$Married == "",]
test[test$Married == "",]$Married
est[test$Married == "",]$Married<-"N"
test[test$Married == "",]$Married<-"N"
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
summary(test$Married)
test[test$Married == "",]$Married<-as.factor("N")
str(test)
test[test$Married == "",]$Married<-as.factor(as.character("N"))
test[test$Married %in% ("","NA",]$Married<-as.factor(as.character("N"))
test[test$Married %in% ("","NA"),]$Married<-as.factor(as.character("N"))
test[isNA(test$Married),]$Married<-as.factor(as.character("N"))
test[isna(test$Married),]$Married<-as.factor(as.character("N"))
?isNA
test[is.na(test$Married),]$Married<-as.factor(as.character("N"))
test[is.na(test$Married),]$Married<-as.factor(leavel("N"))
test[is.na(test$Married),]$Married<-as.factor(level("N"))
test[is.na(test$Married),]$Married<-as.factor(factor.level("N"))
test[is.na(test$Married),]$Married<-"N"
test[is.na(test$Married),]$Married<-NA
test[test$Married == "",]$Married<-NA
summary(test$Married)
str(test)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
test$Married<-as.character(test$Maried)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
test$Married<-as.character(test$Married)
test$Married[test$Married == ""]<-"NA"
test$Married<-as.factor(test$Married)
str(test)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
test$Married<-as.character(test$Married)
test$Married[test$Married == ""]<-NA
test$Married<-as.factor(test$Married)
str(test)
str(train)
summary(test$Dependents)
test$Dependents<-as.character(test$Dependents)
test$Dependents[test$Dependents == ""]<-NA
test$Dependents<-as.factor(test$Dependents)
summary(test$Dependents)
test$Loan_Status<-as.factor("N")
str(test)
test$Loan_Status<-as.factor("N","Y")
pred_rf<-predict(Model_rf,newdata=test,type="response",predict.all=T)
summary(pred_rf$aggregate)
str(test.appl)
res_rf<-data.frame(Applicantion_ID=test.appl$Application_ID,Loan_Status=pred_rf$aggregate)
View(res_rf)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
test$Married<-as.character(test$Married)
test$Married[test$Married == ""]<-"N"
test$Married<-as.factor(test$Married)
test$Dependents<-as.character(test$Dependents)
test$Dependents[test$Dependents == ""]<-"0"
test$Dependents<-as.factor(test$Dependents)
str(test)
test<-read.csv("test_data.csv",header=T,sep=",")
test.appl<-subset(test,select=c(1))
test<-data_process(test)
str(test)
test$Married<-as.character(test$Married)
test$Married[test$Married == ""]<-"No"
test$Married<-as.factor(test$Married)
test$Dependents<-as.character(test$Dependents)
test$Dependents[test$Dependents == ""]<-"0"
test$Dependents<-as.factor(test$Dependents)
str(test)
pred_rf<-predict(Model_rf,newdata=test,type="response",predict.all=T)
summary(pred_rf$aggregate)
res_rf<-data.frame(Applicantion_ID=test.appl$Application_ID,Loan_Status=pred_rf$aggregate)
View(res_rf)
write.csv(res_rf,file="test_output.csv")
dim(res_rf)
summary(res_rf)
names(res_rf)
res_rf<-data.frame(Application_ID=test.appl$Application_ID,Loan_Status=pred_rf$aggregate)
write.csv(res_rf,file="test_output.csv")
names(res_rf)
write.csv(res_rf,file="test_output.csv",header=T,sep=",")
write.csv(res_rf,file="test_output.csv",sep=",")
?write.csv
write.csv(res_rf,file="test_output.csv",row.names=F)
